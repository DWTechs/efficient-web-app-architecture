<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mono or multi repository on Efficient-web-app-architecture</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/</link><description>Recent content in Mono or multi repository on Efficient-web-app-architecture</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/index.xml" rel="self" type="application/rss+xml"/><item><title>Conclusion</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/conclusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/conclusion/</guid><description>How to choose? Different companies and projects will benefit from one strategy or the other based on their unique conditions. Here is a list of criterias you can use to help you choose :
Are different programming languages involved? Do they require a particular software installed or special hardware to run? How many deployment tools are required, and how complex are they to set up? What is the culture in the company?</description></item><item><title>What is Mono-repository</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/mono-repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/mono-repo/</guid><description>The mono-repo approach uses a single repository to host all the code for the multiple services composing a micro-services. At its most extreme, the whole codebase from a company — spanning various projects and coded in different languages — can be hosted in a single repository but here we will only talk about one micro-services application.
Advantages of Mono-repo A single place to store all the project code. Can be accessed by everyone in the team Easy to reuse and share code, collaborate with teams Easy to understand the impact of your change on the entire project.</description></item><item><title>What is multi-repository</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/multi-repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-web-app-architecture/microservices/mono-repo-vs-multi-repo/multi-repo/</guid><description>The multi-repo approach uses several repositories to host the multiple libraries or services of a project. At its most extreme, it will host every minimum set of reusable code or standalone functionality (such as a microservice) under its own repository.
Advantages of Multi-repo Each service and library have its own versioning Code check-outs and pulls are small and separate, thus there are no performance issues even if the project size grows Teams can work independently and do not need access to the entire codebase Faster development and flexibility Each service can be released separately and have its own deployment cycle Better access control – all teams do not need to have full access to all the libraries – but can get read access if they need Independent library versioning When tagging a repository, its whole codebase is assigned the “new” tag.</description></item></channel></rss>