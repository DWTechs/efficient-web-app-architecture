<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on Efficient-web-app-architecture</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/</link><description>Recent content in Microservices on Efficient-web-app-architecture</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-web-app-architecture/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Challenges</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-web-app-architecture/microservices/overview/</guid><description>If your client is thinking about shifting to a microservices architecture, he also needs to change the way people work, not just the apps. Organizational and cultural changes are identified as challenges in part because each team will have its own deployment cadence and will be responsible for a unique service with its own set of customers. Those may not be typical developer concerns, but they will be essential to a successful microservices architecture.</description></item><item><title>Organization</title><link>https://dwtechs.github.io/efficient-web-app-architecture/microservices/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-web-app-architecture/microservices/organization/</guid><description>Managing microservices in a multi-repo strategy Microservices architecture implies thorough reflection on the way of working and organization of the teams. With git submodules, Docker-compose and Gitlab CI we optimize processes and ensure Microservices architecture and multi-repo strategy are used at their full potential by fully decoupling services.
Those tools helps the teams deliver efficiently and undertake inherent challenges of this architecture :
Integration: Manage relations between all microservices with Git submodules Versioning: Secure the global version and history with separated services with Git submodules Environment setup: Launch the application in few minutes with Git submodules and Docker CI/CD: Test and deploy the application autmaticaly with low maintenance cost with Docker and Gitlab CI.</description></item></channel></rss>